var tipuesearch = {"pages": [{'title': 'About', 'text': '網際內容管理課程要求每一位學員利用 \xa0 wcm2022 template \xa0與\xa0 Github Pages \xa0 建立名稱為 wcm2022 的倉儲以及網頁. 因此需要在近端執行 Python 程式, 且需要 flask flask_cors bs4 lxml pelican markdown leo pyopenssl 等 Python 模組. \n', 'tags': '', 'url': 'About.html'}, {'title': 'Midterm', 'text': '\n 配合 Wink 檔案將 js 檔案設定如下 \n \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'W12', 'text': '建立 Virtualbox 虛擬主機\n \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'run', 'text': 'ROC 國旗規格   PROC 國旗規格   USA 國旗規格 \n Gist Brython scripts \n 解題練習 \n Cango \n \n \n  for ggame  \n \n \n \n \n \n \n \n \n  Cango 程式庫  \n \n \n \n \n \n \n \n \n  for Konva 程式庫  \n \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n add 1 to 100 p261 ROC flag PROC flag USA flag Draw Grid Random Rect Rect Walk Rect U Walk Rect rev U Walk 單節貪食蛇 5 個紅點方塊 Snake BSnake auto_guess ball bezier big_lotto brython_kw bunny cango_spur cango_spur1 cango_three_gears clear clock convert_temp deepmerge display_stl draw ex1 ex2 ex3 ex4 fibo fourbar guess_a_number hw1_1 hw1_2 Keycode knova1 merge3 power_lotto spur spur_w_form stl_binary_ascii stl_writer Tetris turtle1 turtle2 turtle3 turtle4 turtle5 turtle6 turtle7 turtle8 twl_link_ik webcam websocket ycqsort \n  ######################  editor1 開始 ######################  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n', 'tags': '', 'url': 'run.html'}, {'title': 'W17', 'text': '重新使用pull requestes建立倉儲\xa0 \n 盡速了解最後瞭周評分標準 \n', 'tags': '', 'url': 'W17.html'}, {'title': 'W18', 'text': '# from https://levelup.gitconnected.com/writing-tetris-in-python-2a16bddb5318 # 暫時關閉 system proxy 設定後, pip install pygame #import pygame import random # 以下為 Brython 新增 from browser import document as doc from browser import html import browser.timer \n # 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應 canvas = html.CANVAS(width = 400, height = 500, id="canvas") brython_div = doc["brython_div"] brython_div <= canvas ctx = canvas.getContext("2d") \n colors = [  (0, 0, 0),  (120, 37, 179),  (100, 179, 179),  (80, 34, 22),  (80, 134, 22),  (180, 34, 22),  (180, 34, 122), ] \n class Figure:  x = 0  y = 0 \n figures = [  [[1, 5, 9, 13], [4, 5, 6, 7]],  [[4, 5, 9, 10], [2, 6, 5, 9]],  [[6, 7, 9, 10], [1, 5, 6, 10]],  [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],  [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],  [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],  [[1, 2, 5, 6]],  ] \n def __init__(self, x, y):  self.x = x  self.y = y  self.type = random.randint(0, len(self.figures) - 1)  self.color = random.randint(1, len(colors) - 1)  self.rotation = 0 \n def image(self):  return self.figures[self.type][self.rotation] \n def rotate(self):  self.rotation = (self.rotation + 1) % len(self.figures[self.type]) \n class Tetris:  level = 2  score = 0  state = "start"  field = []  height = 0  width = 0  x = 100  y = 60  zoom = 20  figure = None \n def __init__(self, height, width):  self.height = height  self.width = width  self.field = []  self.score = 0  self.state = "start"  for i in range(height):  new_line = []  for j in range(width):  # 起始時每一個都填入 0  new_line.append(0)  self.field.append(new_line) \n def new_figure(self):  self.figure = Figure(3, 0) \n def intersects(self):  intersection = False  for i in range(4):  for j in range(4):  if i * 4 + j in self.figure.image():  # block 到達底部, 左右兩邊界, 或該座標有其他 block  if i + self.figure.y > self.height - 1 or \\  j + self.figure.x > self.width - 1 or \\  j + self.figure.x < 0 or \\  self.field[i + self.figure.y][j + self.figure.x] > 0:  intersection = True  return intersection \n def break_lines(self):  lines = 0  for i in range(1, self.height):  zeros = 0  for j in range(self.width):  if self.field[i][j] == 0:  zeros += 1  if zeros == 0:  lines += 1  for i1 in range(i, 1, -1):  for j in range(self.width):  self.field[i1][j] = self.field[i1 - 1][j]  self.score += lines ** 2 \n def go_space(self):  while not self.intersects():  self.figure.y += 1  self.figure.y -= 1  self.freeze() \n def go_down(self):  self.figure.y += 1  if self.intersects():  self.figure.y -= 1  self.freeze() \n def freeze(self):  for i in range(4):  for j in range(4):  if i * 4 + j in self.figure.image():  self.field[i + self.figure.y][j + self.figure.x] = self.figure.color  self.break_lines()  self.new_figure()  if self.intersects():  self.state = "gameover" \n def go_side(self, dx):  old_x = self.figure.x  self.figure.x += dx  if self.intersects():  self.figure.x = old_x \n def rotate(self):  old_rotation = self.figure.rotation  self.figure.rotate()  if self.intersects():  self.figure.rotation = old_rotation \n # Define some colors # from https://stackoverflow.com/questions/3380726/converting-a-rgb-color-tuple-to-a-six-digit-code BLACK = \'#%02x%02x%02x\' % (0, 0, 0) WHITE = \'#%02x%02x%02x\' % (255, 255, 255) GRAY = \'#%02x%02x%02x\' % (128, 128, 128) \n done = False fps = 25 game = Tetris(20, 10) counter = 0 \n pressing_down = False \n def key_down(eve):  key = eve.keyCode  #if event.type == pygame.QUIT:  # 32 is pause  if key == 32:  done = True  # 82 is r key to rotate  if key == 82:  game.rotate()  # 40 is down key  if key == 40:  pressing_down = True  # 37 is left key  if key == 37:  game.go_side(-1)  # 39 is right key  if key == 39:  game.go_side(1)  # 68 is d key to move block to bottom  if key == 68:  game.go_space()  # 27 is escape  # reset the game  if key == 27:  game.__init__(20, 10) \n def key_up(eve):  key = eve.keyCode  # 40 is down key  if key == 40:  pressing_down = False \n #while not done: def do_game():  global counter  if game.figure is None:  game.new_figure()  counter += 1  if counter > 100000:  counter = 0  if counter % (fps // game.level // 2) == 0 or pressing_down:  if game.state == "start":  game.go_down()    for i in range(game.height):  for j in range(game.width):  ctx.fillStyle = WHITE  #ctx.scale(game.zoom, game.zoom)  ctx.fillRect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)  if game.field[i][j] > 0:  ctx.fillStyle = \'#%02x%02x%02x\' % colors[game.field[i][j]]  ctx.fillRect(game.x + game.zoom * j + 1, game.y + game.zoom * i + 1, game.zoom - 2, game.zoom - 1)  ctx.lineWidth = 1  ctx.strokeStyle = GRAY  ctx.beginPath()  ctx.rect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)  ctx.stroke()  if game.figure is not None:  for i in range(4):  for j in range(4):  p = i * 4 + j  if p in game.figure.image():  ctx.fillStyle = \'#%02x%02x%02x\' % colors[game.figure.color]  ctx.fillRect(game.x + game.zoom * (j + game.figure.x) + 1,  game.y + game.zoom * (i + game.figure.y) + 1,  game.zoom - 2, game.zoom - 2) # 宣告文字的大小為20px  ctx.font = \'20px serif\'  # 宣告文字顏色為黑色  ctx.fillStyle = BLACK  # 將分數顯示在遊戲區上方, 座標為(100, 50), 並設定變數為text  ctx.fillText(\'Score:\'+ str(game.score), 100,50)    # 宣告變數int = 1 ，如果分數大於int，則畫布清掉原本的分數填上新的得分分數  int = 1  if game.score >= int:  ctx.fillStyle = WHITE  ctx.fillRect( 150, 0, 200, 50)  ctx.fillStyle = BLACK  ctx.fillText(str(game.score), 150,50) doc.addEventListener("keydown", key_down) doc.addEventListener("keyup", key_up) browser.timer.set_interval(do_game, fps) \n \n  graphics-column is for ggame  \n \n  ######################  editor1 結束 ######################  \n  以下可以開始利用 editor1 的設定編寫對應 Brython 程式  \n \n  以上為內建程式, 頁面可透過 ?src=gist_url 執行  \n  add 1 to 100 開始  \n \n', 'tags': '', 'url': 'W18.html'}]};